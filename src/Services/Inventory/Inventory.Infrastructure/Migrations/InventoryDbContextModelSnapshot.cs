// <auto-generated />
using System;
using Inventory.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Inventory.Infrastructure.Migrations
{
    [DbContext(typeof(InventoryDbContext))]
    partial class InventoryDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.21")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Inventory.Domain.Aggregates.Resource", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<decimal>("PricePerHour")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("Status");

                    b.HasIndex("Type");

                    b.ToTable("Resources", (string)null);
                });

            modelBuilder.Entity("Inventory.Domain.Aggregates.Resource", b =>
                {
                    b.OwnsOne("Inventory.Domain.ValueObjects.Capacity", "Capacity", b1 =>
                        {
                            b1.Property<Guid>("ResourceId")
                                .HasColumnType("uuid");

                            b1.Property<int>("MaxPeople")
                                .HasColumnType("integer")
                                .HasColumnName("MaxPeople");

                            b1.Property<int>("MinPeople")
                                .HasColumnType("integer")
                                .HasColumnName("MinPeople");

                            b1.HasKey("ResourceId");

                            b1.ToTable("Resources");

                            b1.WithOwner()
                                .HasForeignKey("ResourceId");
                        });

                    b.OwnsOne("Inventory.Domain.ValueObjects.Location", "Location", b1 =>
                        {
                            b1.Property<Guid>("ResourceId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Address")
                                .IsRequired()
                                .HasMaxLength(500)
                                .HasColumnType("character varying(500)")
                                .HasColumnName("Address");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("City");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("Country");

                            b1.Property<double?>("Latitude")
                                .HasColumnType("double precision")
                                .HasColumnName("Latitude");

                            b1.Property<double?>("Longitude")
                                .HasColumnType("double precision")
                                .HasColumnName("Longitude");

                            b1.Property<string>("PostalCode")
                                .HasMaxLength(20)
                                .HasColumnType("character varying(20)")
                                .HasColumnName("PostalCode");

                            b1.HasKey("ResourceId");

                            b1.ToTable("Resources");

                            b1.WithOwner()
                                .HasForeignKey("ResourceId");
                        });

                    b.OwnsMany("Inventory.Domain.ValueObjects.TimeSlot", "AvailableSlots", b1 =>
                        {
                            b1.Property<Guid>("ResourceId")
                                .HasColumnType("uuid");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.Property<DateTime>("EndTime")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<DateTime>("StartTime")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<string>("Status")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)");

                            b1.HasKey("ResourceId", "Id");

                            b1.ToTable("TimeSlots", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("ResourceId");
                        });

                    b.Navigation("AvailableSlots");

                    b.Navigation("Capacity")
                        .IsRequired();

                    b.Navigation("Location")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
